///scrollMonitor
(async () => {
    // var monitorAllSportTime=["20","21"];
    var monitorAllSportTime = ["78", "86"];
    var monitorOrSportTime = ["07", "08", "09", "10", "11", "15", "16", "17", "18", "19", "20"];
    var current = location.href;

    // var monitorDay="星期三";//星期一星期二星期三星期四星期五星期六星期日
    var monitorDays = ["星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期日"];
   
     console.log(localStorage.getItem("cacheMapLocalStorageKey"));
    var sleepTime = 20; //秒
    function sleep(time) {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, time);
        });
    }
     function isNull(awaitEle) {
        return (typeof awaitEle === "undefined" || typeof awaitEle === null || typeof(awaitEle) == 'undefined' || awaitEle == 'null' || JSON.stringify(awaitEle) === '{}' || JSON.stringify(awaitEle) === 'null')
    }
     var cacheDateMap =localStorage.getItem("cacheMapLocalStorageKey") ;
     console.log("get cacheDateMap");
                 console.log(cacheDateMap);

    if(isNull(cacheDateMap)){
        cacheDateMap=new Map();
            localStorage.setItem("cacheMapLocalStorageKey",JSON.stringify({'currentNotifyAll':'0','currentNotifyOr':'0'}));
        console.log("cacheDateMap null");
    }else {
    cacheDateMap=JSON.parse(cacheDateMap);
    }
            console.log(cacheDateMap);

function getOS() {
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;
 
  if (userAgent.indexOf("Windows NT 10.0") != -1) return "Windows 10";
  if (userAgent.indexOf("Windows NT 6.1") != -1) return "Windows 7";
  if (userAgent.indexOf("Windows NT 6.0") != -1) return "Windows Vista";
  if (userAgent.indexOf("Windows NT 5.1") != -1) return "Windows XP";
  if (userAgent.indexOf("Windows NT 5.0") != -1) return "Windows 2000";
  if (userAgent.indexOf("Mac OS X") != -1) return "Mac OS X";
  if (userAgent.indexOf("Android") != -1) return "Android";
  if (userAgent.indexOf("iPhone") != -1) return "iOS";
 
  return "Unknown OS";
}
var osName=getOS();
   

    function reloadBody() {
        //start reload html
        try {

            //document.body.innerHTML = '';

var childCount=0;
             var parentNode = document.body;
              if (parentNode) {
                for (let child; (child = parentNode.firstChild);) {
                  parentNode.removeChild(child);
                  childCount++;
                }
              }

            var newframeset = document.createElement("frameset");
            newframeset.id = 'frameset_by_';
            var newframe = document.createElement("frame");
            newframe.src = location.href;
            newframeset.appendChild(newframe);
            document.body.appendChild(newframeset);

        } catch (err) {
            console.log(err);
        }
        //end reload html

    }

    async function awaiteleArrSizeAndMaxWait(awaitEle, maxWaitSecond) {
        let startTime = new Date()
            .getTime() / 1000;
        while (awaitEle.length <= 0) {
            await sleep(30);
            let endTime = new Date()
                .getTime() / 1000;
            if (endTime - startTime > maxWaitSecond) {
                console.log("awaiteleArrSizeAndMaxWait over" + maxWaitSecond);

                return;
            }
        }
        console.log("return awaiteleArrSize " + awaitEle.length);

    }
    async function reload() {


        console.log(document);

        try {
            await awaiteleArrSizeAndMaxWait(document.getElementsByClassName("slider-item text-center rounded-[4px]"), 15);
            var currentDays = document.getElementsByClassName("slider-item text-center rounded-[4px]");
            console.log(currentDays);

            var monitorDaysMap = new Map();

            for (let keyData in monitorDays) {

                monitorDaysMap.set(monitorDays[keyData], monitorDays[keyData]);
            }
            console.log(monitorDaysMap);
            var currentDaysMap = new Map();
            var containDocument = [];
            for (let keyData = 0; keyData < 3; keyData++) {
                console.log(currentDays[keyData].innerText);
                let indexText = currentDays[keyData].innerText.split("\n")[1];
                if (isNull(monitorDaysMap.get(indexText))) {
                    continue;
                }
                console.log("indexText " + indexText);
                containDocument.push(currentDays[keyData]);
            }
        } catch (err) {
            console.log(err);
        }
        //
        console.log(containDocument);

        for (let keyData in containDocument) {

            console.log("contain text " + containDocument[keyData].innerText);
            let whatDay = containDocument[keyData].innerText.split("\n")[1];

            containDocument[keyData].click();
            await awaiteleArrSizeAndMaxWait(document.getElementsByTagName("table"), 15);
            await awaiteleArrSizeAndMaxWait(document.getElementsByClassName("tablecell"), 15);


            var tableEle = document.getElementsByTagName("table");
            var allTds = tableEle[tableEle.length - 1].getElementsByTagName("td");

            var conextTable = tableEle[tableEle.length - 1];
            var rowLength = conextTable.rows.length;

            var colLength = conextTable.rows[0].cells.length;

            let map = new Map();
            for (var colIndex = 0; colIndex < colLength; colIndex++) {

                var lineText = "";
                // 遍历当前行的所有单元格
                for (var rowIndex = 0; rowIndex < rowLength; rowIndex++) {
                    var row = conextTable.rows[rowIndex];
                    let sportNumber = (colIndex + 1);
                    var cell = row.cells[colIndex];
                    if (isNull(cell)) {
                        continue;
                    }
                    let currentHasBook = false;

                    if (cell.classList.contains("col-completed") || cell.classList.contains("col-locked")) {
                        currentHasBook = true;
                        continue;
                    }

                    if (cell.innerText.indexOf("开放预订") != -1) {
                        continue;
                    }
                    if (cell.innerText.indexOf("预订中") != -1) {
                        continue;
                    }
                    if (cell.innerText.indexOf("已预订") != -1) {
                        continue;
                    }
                    if (cell.innerText.indexOf("公益培训") != -1) {
                        continue;
                    }
                    if (cell.innerText.indexOf("不开放") != -1) {
                        continue;
                    }

                    if (!currentHasBook && cell.innerText.indexOf(":") != -1 && cell.innerText.indexOf("-") != -1) {} else {
                        continue;
                    }
                    try {
                        sportNumber = (cell.classList + "")
                            .split("schedule-table_column_")[1]; //
                    } catch (err) {
                        console.log(err);
                    }
                    let cellText = cell.innerText;
                    var substringTime = cellText.substring(0, 2);
                    //console.log("场地:"+(sportNumber)+" rowIndex "+(rowIndex+1)+" "+cell.innerText+" "+cell.classList);
                    let mapKey = substringTime + "";
                    let mapValue = map.get(mapKey);
                    if (isNull(mapValue)) {
                        mapValue = [];
                    }
                    mapValue.push([{
                        "sportNumber": "" + sportNumber,
                        "timestamp": "" + substringTime,
                        "cellText": cellText
                    }]);
                    map.set(mapKey, mapValue);
                }
            }
            console.log("rowLength" + rowLength + ",colLength " + colLength);
            console.log(map);

            let containAllSport = true;
            let containOrSport = false;

            var sportArrAll = [];
            var sportArrOr = [];
            let sportNumberAndNo;
            let sportNumberOrNo;

            for (let keyData in monitorAllSportTime) {
                let sportTime = monitorAllSportTime[keyData] + "";
                let mapValue = map.get(sportTime);


                sportArrAll.push({
                    "sportTime": sportTime,
                    "value": mapValue
                });
                if (isNull(mapValue)) {
                    containAllSport = false;
                    break;
                } else {
                    console.log("sportTime " + sportTime);
                    console.log(mapValue);
                    sportNumberAndNo = sportArrAll[0].value[0][0].sportNumber;
                }
            }
            if (containAllSport && monitorAllSportTime.length > 0) {
                console.log("containAllSport");
                console.log(sportArrAll);
                console.log(new Date());
                let currentNotify = cacheDateMap["currentNotifyAll"];
                let nowDate = new Date() - 1;
                if (isNull(currentNotify) || (nowDate - currentNotify) > 1000 * 60 * 60 * 3) {
                    cacheDateMap["currentNotifyAll"]=new Date() - 1;
                    console.log("containAllSport " + sportNumberAndNo);

                    if(osName=="Windows 7"){
                        window.open("https://localhost.notify/sportNotify?sportNumberNo=" + sportNumberAndNo+"&whatDay="+whatDay+ "&containType=all&timestamp=" + (new Date()));
                        window.open("http://localhost:8645/sportNotify?sportNumberNo=" + sportNumberAndNo+"&whatDay="+whatDay+ "&containType=all&timestamp="+(new Date()));
                    }
                    else {
                    window.open("https://localhost.notify/sportNotify?sportNumberNo=" + sportNumberAndNo+"&whatDay="+whatDay+ "&containType=all&timestamp=" + (new Date()));
                        window.open("http://localhost:8645/sportNotify?sportNumberNo=" + sportNumberAndNo+"&whatDay="+whatDay+ "&containType=all&timestamp="+(new Date()));
                    }
                    // 
                } else {
                    console.log("send ok1");
                }

            }
            console.log(sportArrOr);
            for (let keyData in monitorOrSportTime) {
                let sportTime = monitorOrSportTime[keyData] + "";
                let mapValue = map.get(sportTime);


               

                if (isNull(mapValue)) {

                } else {
                 sportArrOr.push({
                    "sportTime": sportTime,
                    "value": mapValue
                });
                    console.log("sportTime " + sportTime);
                    console.log(mapValue);
                    sportNumberOrNo = sportArrOr[0].value[0][0].sportNumber;
                    containOrSport = true;
                    break;
                }
            }
            //#####22222
            if (containOrSport && monitorOrSportTime.length > 0) {
                console.log("containOrSport");
                console.log(sportArrOr);
                console.log(new Date());
                let currentNotify = cacheDateMap["currentNotifyOr"];
                let nowDate = new Date() - 1;
                if (isNull(currentNotify) || (nowDate - currentNotify) > 1000 * 60 * 60 * 1) {
                    cacheDateMap["currentNotifyOr"]=new Date() - 1;
                    console.log("containAllSport " + sportNumberOrNo);
                   if(osName=="Windows 7"){
                        window.open("https://localhost.notify/sportNotify?sportNumberNo=" + sportNumberOrNo+"&whatDay="+whatDay+ "&containType=or&timestamp=" + (new Date()));
                        window.open("http://localhost:8645/sportNotify?sportNumberNo=" + sportNumberOrNo+"&whatDay="+whatDay+ "&containType=or&timestamp="+(new Date()));
                    }
                    else {
                        window.open("https://localhost.notify/sportNotify?sportNumberNo=" + sportNumberOrNo+"&whatDay="+whatDay+ "&containType=or&timestamp=" + (new Date()));
                        window.open("http://localhost:8645/sportNotify?sportNumberNo=" + sportNumberOrNo+"&whatDay="+whatDay+ "&containType=or&timestamp="+(new Date()));
                    }
                } else {
                    console.log("send ok2");
                }

            }
            localStorage.setItem("cacheMapLocalStorageKey", JSON.stringify(cacheDateMap));

     


            await sleep(1000);
      
    
   
        }

    
    



    }

     function backLastUrl() {
      let currentUrl=location.href;
      if('https://lhqkl.ydmap.cn/_/sn/busy.html'==currentUrl){
      window.history.back();
  return;
      }
    }


   // while (true) {
        try {
        document.title = ""+(osName);
backLastUrl();
            await reload();

        } catch (err) {
            console.log(err);
        } finally {
            console.log("current " + new Date());
            await sleep(sleepTime * 1000);
                location.reload();

        }

   // }

})()
